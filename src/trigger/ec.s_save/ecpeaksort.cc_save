
/* ecpeaksort.c */

#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <string.h>
#include <math.h>

#include "eclib.h"

#define MAX(a,b)    (a > b ? a : b)
#define MIN(a,b)    (a < b ? a : b)
#define ABS(x)      ((x) < 0 ? -(x) : (x))


/* 2.39/71/18/0%/0%/11%/23% - bubble sort */

#undef DEBUG

#if 0
uint8_t
get_least_energy(uint16_t en[NPEAK])
{
#pragma HLS PIPELINE
#pragma HLS INLINE
  uint8_t i, j;
  uint16_t energy;
  j = 0;
  energy = en[0];
  for(i=1; i<NPEAK; i++)
  {
    if(en[i] < energy)
	{
      j=i;
      energy = en[j];
	}
  }
  return(j);
}
#endif



int
ecpeaksort(ECPeak0 peakin[NSTRIP], ECPeak0 peakout[NPEAK])
{
#pragma HLS PIPELINE
  uint16_t temp1, temp2, temp3;
  uint8_t n,n1,n2; /* shift needed for addr1 and addr2 to be fitted into 7 bit */
  uint8_t i, j, k, strip1, nstrip, npeak, ipeak, mpeak, peak_opened;
  uint16_t energy, energysum, epeak, energysum4coord;

#if 0
  uint16_t en[NPEAKMAX];
#pragma HLS ARRAY_PARTITION variable=en complete dim=1
  uint16_t en1[NPEAKMAX];
#pragma HLS ARRAY_PARTITION variable=en1 complete dim=1
  uint16_t en2[NPEAKMAX];
#pragma HLS ARRAY_PARTITION variable=en2 complete dim=1
  uint16_t en3[NPEAKMAX];
#pragma HLS ARRAY_PARTITION variable=en3 complete dim=1
  uint8_t ind[NPEAKMAX];
#pragma HLS ARRAY_PARTITION variable=ind complete dim=1
  ECPeak0 peak2[NPEAKMAX];
#pragma HLS ARRAY_PARTITION variable=peak2 complete dim=1
  ECPeak0 peak3[NPEAKMAX];
#pragma HLS ARRAY_PARTITION variable=peak3 complete dim=1
#endif

  ECPeak0 peak1[NSTRIP];
#pragma HLS ARRAY_PARTITION variable=peak1 complete dim=1
  ECPeak0 peakswap;

#ifdef DEBUG
  printf("\n\n++ ecpeaksort ++\n");
  printf("BEFOR:\n");
  for(i=0; i<NSTRIP; i++)
  {
    printf("peakin[%2d]: energy=%d, energysum4coord=%d, first strip=%d, number of strips=%d\n",
      i,peakin[i].energy,peakin[i].energysum4coord,peakin[i].strip1,peakin[i].stripn);
  }
#endif

#if 0
  for(i=0; i<NPEAKMAX; i++)
  {
    peak1[i] = peakin[i];
    en[i]    = peakin[i].energy;
    ind[i]   = i;
  }
  for(i=NPEAK; i<NPEAKMAX; i++)
  {
    j=0;
    if(en[0]<en[1] && en[0]<en[2]) j=0;
    if(en[1]<en[0] && en[1]<en[2]) j=1;
    if(en[2]<en[0] && en[2]<en[1]) j=2;
	/*
    j = get_least_energy(en);
	*/

    if(en[j] < en[i])
    {
      en[j] = en[i];
      ind[j] = ind[i];
    }
  }
  for(i=0; i<NPEAK; i++) peakout[i] = peak1[ind[i]];
#endif



#if 1
  /* bubble sort */
  for(i=0; i<NSTRIP; i++) peak1[i] = peakin[i];

  for(i=1; i<NSTRIP; i++)
  {
    for(j=0; j<(NSTRIP-i); j++)
    {
      if (peak1[j].energy < peak1[j+1].energy)
      {
        peakswap = peak1[j];
        peak1[j]    = peak1[j+1];
        peak1[j+1]  = peakswap;
      }
    }
  }
  for(i=0; i<NPEAK; i++) peakout[i] = peak1[i];

  /* bubble sort 
  for(i=0; i<NPEAKMAX; i++) peak1[i] = peakin[i];
  for(i=0; i<(NPEAKMAX-1); i++)
  {
    for(j=0; j<(NPEAKMAX-i-1); j++)
    {
      if (peak1[j].energy < peak1[j+1].energy)
      {
        peakswap[j] = peak1[j];
        peak1[j]    = peak1[j+1];
        peak1[j+1]  = peakswap[j];
      }
    }
  }
  for(i=0; i<NPEAK; i++) peakout[i] = peak1[i];
*/
#endif




#ifdef DEBUG
  printf("AFTER:\n");
  for(i=0; i<NPEAK; i++)
  {
    printf("peakout[%2d]: energy=%d, energysum4coord=%d, first strip=%d, number of strips=%d\n",
      i,peakout[i].energy,peakout[i].energysum4coord,peakout[i].strip1,peakout[i].stripn);
  }
#endif

  return(0);
}
